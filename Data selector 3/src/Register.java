
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;  // My imports 
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jackg
 */
public class Register extends javax.swing.JFrame { // class extends JFrame

    String username; // creating string variable called username 
    String password; // creating string variable called password
    String email; // creating string variable called email
    JFrame frame = new JFrame(); // creating frame Object for dialog box 
    File file = new File("Users.txt"); // creating file object with file name 
    User user = new User(username, password, email); // creating object user from class user 
    Login loginPage = new Login(); // creating login object from login class

    /**
     * Creates new form Register
     */
    public Register() { // register constructor 
        initComponents(); // intitate components such as labels, textfields, buttons and JFrame.
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        registerLbl = new javax.swing.JLabel();
        usernameLbl = new javax.swing.JLabel();
        passwordLbl = new javax.swing.JLabel();
        usernameTxt = new javax.swing.JTextField();
        registerBtn = new javax.swing.JButton();
        passwordTxt = new javax.swing.JPasswordField();
        alreadyRegisteredBtn = new javax.swing.JButton();
        emailTxt = new javax.swing.JTextField();
        emailLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        registerLbl.setFont(new java.awt.Font("Trebuchet MS", 1, 36)); // NOI18N
        registerLbl.setText("Register");

        usernameLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        usernameLbl.setText("Enter a desired username:");

        passwordLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        passwordLbl.setText("Enter a desired password:");

        registerBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        registerBtn.setText("Register");
        registerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBtnActionPerformed(evt);
            }
        });

        alreadyRegisteredBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        alreadyRegisteredBtn.setText("Already registered? Click here");
        alreadyRegisteredBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alreadyRegisteredBtnActionPerformed(evt);
            }
        });

        emailLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        emailLbl.setText("Enter a desired email:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(236, 236, 236)
                .addComponent(registerLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 126, Short.MAX_VALUE)
                .addComponent(alreadyRegisteredBtn)
                .addGap(29, 29, 29)
                .addComponent(registerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(passwordLbl)
                        .addComponent(usernameLbl))
                    .addComponent(emailLbl))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usernameTxt)
                    .addComponent(passwordTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                    .addComponent(emailTxt))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(registerLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLbl)
                    .addComponent(usernameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailLbl))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLbl)
                    .addComponent(passwordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(alreadyRegisteredBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(104, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBtnActionPerformed

        username = usernameTxt.getText(); // gets text from username textfields
        password = String.valueOf(passwordTxt.getPassword()); // gets password from passwordfield and parses it to a string
        email = emailTxt.getText(); // gets email variable from email text 

        try {
            if (createAccount()) { // if method create account returns true
                try {
                    //  System.out.println("register " + username); // testing username that is passed 

                    user.storeUser(username, password, email); // called method storeUser from user class and passes parameters 
                    Login loginFrame; // new login object from login class
                    loginFrame = new Login(); // assign object to login class
                    loginFrame.setVisible(true); // set the objects frame to visible
                    this.setVisible(false); // close this frame
                } catch (IOException ex) { // catch if input output exception 
                    Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                // if create account returns false does nothing as error diaglog boxes are shown in createAccount method

            }
        } catch (FileNotFoundException ex) { // if file not 
            JOptionPane.showMessageDialog(frame, "file not found"); // lets user and developer know that the file was not found 
        }


    }//GEN-LAST:event_registerBtnActionPerformed

    private void alreadyRegisteredBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alreadyRegisteredBtnActionPerformed
        Login loginFrame; // new login object from login class 

        loginFrame = new Login(); // assign object to login class 
        loginFrame.setVisible(true); // set object frame to visible 
        this.setVisible(false); // close this frame 


    }//GEN-LAST:event_alreadyRegisteredBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() { // on create 
                new Register().setVisible(true); // create this frame 
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alreadyRegisteredBtn;
    private javax.swing.JLabel emailLbl;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JLabel passwordLbl;
    private javax.swing.JPasswordField passwordTxt;
    private javax.swing.JButton registerBtn;
    private javax.swing.JLabel registerLbl;
    private javax.swing.JLabel usernameLbl;
    private javax.swing.JTextField usernameTxt;
    // End of variables declaration//GEN-END:variables

    private boolean createAccount() throws FileNotFoundException { // boolean method create account with exception file not found 
        if (username.length() < 6 || password.length() < 6) {
            JOptionPane.showMessageDialog(frame, "Username or password must be longer than 6 letters."); // shows dialog box to let user and developer know that the username or password is not long enough
            return false;
        }
        if (username.equals("") || password.equals("") || email.equals("")) { //if username or password or email is empty
            JOptionPane.showMessageDialog(frame, "No username, or password, or email entered."); // shows dialog box to let user and developer know that one of the textfields is empty 
            return false; // returns false as the textfields were empty
        }

        // Encrypt Username
        StringBuilder sb = new StringBuilder(); // creating new stringBuilder object
        for (int i = 0; i < username.length(); i++) { // loops through username character by character
            char c = username.charAt(i); // creates new char object and assigns each looped character to it 
            if (c >= 'a' && c <= 'm') { // Rot 13 encryption. if character equals a and equals m or is in between, plus that character 13 letters up the alphabet
                c += 13;
            } else if (c >= 'A' && c <= 'M') { // Rot 13 encryption. if character equals capital a and equals capital m or is in between, plus that character 13 letters up the alphabet
                c += 13;
            } else if (c >= 'n' && c <= 'z') { // Rot 13 encryption. if character equals n and equals z or is in between, minus that character 13 letters down the alphabet
                c -= 13;
            } else if (c >= 'N' && c <= 'Z') { // Rot 13 encryption. if character equals capital n and equals capital z or is in between, minus that character 13 letters down the alphabet
                c -= 13;
            }
            sb.append(c); // append the characters to the string builder object 

        }
        username = sb.toString(); // assign the username variable to the stringbuilder object 
        int line = 0; // creating variable line as int delcared as 0;
        Scanner myScanner = new Scanner(file); // creating scanner object which reads file object 
        while (myScanner.hasNextLine()) { // while scanner has a line to read
            String checkUser = myScanner.nextLine(); // creating a string variable and assigning the scanner line to it 
            line++; // plus line by 1 every loop
            if (checkUser.contains(username)) { // if the string checkUser contains the variable username 
                JOptionPane.showMessageDialog(frame, "Username already in use."); // show dialog box to let user and developer know the username is already in use 
                return false; // returns false 
            }
        }

        StringBuilder bs = new StringBuilder();  // creating new stringBuilder object
        for (int i = 0; i < username.length(); i++) {  // loops through username character by character
            char c = username.charAt(i); // creates new char object and assigns each looped character to it 
            if (c >= 'a' && c <= 'm') { // Rot 13 decryption. if character equals a and equals m or is in between, plus that character 13 letters up the alphabet
                c += 13;
            } else if (c >= 'A' && c <= 'M') { // Rot 13 decryption. if character equals capital a and equals capital m or is in between, minus that character 13 letters up the alphabet
                c -= 13;
            } else if (c >= 'n' && c <= 'z') { // Rot 13 decryption. if character equals n and equals z or is in between, minus that character 13 letters down the alphabet
                c -= 13;
            } else if (c >= 'N' && c <= 'Z') { // Rot 13 decryption. if character equals capital n and equals capital z or is in between, minus that character 13 letters down the alphabet
                c -= 13;
            }
            bs.append(c); // assign character to new string builder object 

        }
        // Had to encrypt the username that was entered to check the file for already encrpyted usernames to check if it contains it.
        // If it did not, I decrypted it back to the username that the user had entered 

        // I chose ROT13 as my encryption method as it was the first one I researched. As I was given feedback to research it. 
        // However, even after choosing it I believe that the security of it is not very good and if someone would want to decrypt it, they could.
        // Just a simple program would decrypt it as all it would have to do is try each different vary of a word that makes sense with the characters supplied.
        // Also if they found out the shift number by seeing the code, they would be able to decrypt it straight away. 
        // That is why another security issue I can add is to make it that a user can only try to login a maximum of 5 times, if they exceed this number, they will be given a time out. 
        // This makes it longer for the person trying to hack in to my program to do so and could make them frustrated and give up. 
        // thats why I believe i should have chosen a much better encryption method  such as cipher. which uses a secret key for the algorithm.
        // I created the security measure where the username and password had to be longer than 6 characters, as it makes it a much more stronger password. 
        
        
        username = bs.toString(); // assign username variable to new string builder value
        JOptionPane.showMessageDialog(frame, "Registration successful!"); // show dialog box to user and developer that regisration was successful 
        return true; // returns true as the file did not contain the user entered username 

    }

}
